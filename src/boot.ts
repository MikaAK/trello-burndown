declare const __PROD__: boolean, __STAGING__: boolean, __DEV__: booleanrequire('./style/global.scss')import {AppComponent} from './app'import {bootstrap, ELEMENT_PROBE_PROVIDERS}    from 'angular2/platform/browser'import {enableProdMode, provide} from 'angular2/core'import {ROUTER_PROVIDERS} from 'angular2/router'import {HTTP_PROVIDERS} from 'angular2/http'import {Locker, LockerConfig, DRIVERS} from 'angular2-locker'import {ApiService, ApiConfig} from 'angular2-api'import {API_PROVIDERS} from 'api'import {serializeKeys, deserializeKeys} from './api/helpers'import {provideStore, combineReducers, Middleware, usePreMiddleware, usePostMiddleware} from '@ngrx/store'import {auth} from 'shared/services/Auth/Auth.reducer'import {newSprint} from 'shared/directives/NewSprint/NewSprint.reducer'// Environments don't work for some reason yetif (__PROD__ || __STAGING__)  enableProdMode()const actionLog: Middleware = action => {  return action.do(val => {    if (__DEV__)      console.warn('DISPATCHED ACTION: ', val)  })}const stateLog: Middleware = state => {  return state.do(val => {    if (__DEV__)      console.info('NEW STATE: ', val)  })}bootstrap(AppComponent, [  ...(__PROD__ ? [] : ELEMENT_PROBE_PROVIDERS),  ...HTTP_PROVIDERS,  ...ROUTER_PROVIDERS,  ...API_PROVIDERS,  provideStore({auth, newSprint}),  usePreMiddleware(actionLog),  usePostMiddleware(stateLog),  provide(ApiConfig, {    useValue: new ApiConfig({      deserialize(data) {        return deserializeKeys('data' in data ? data.data : data)      },      serialize(data) {        return serializeKeys(data)      },      serializeParams(params) {        //if (params && params.params)          //params.search = serializeKeys(params.params)        return params      }    })  }),  ApiService,  provide(LockerConfig, {useValue: new LockerConfig('burndown', DRIVERS.LOCAL)}),  Locker])